// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id, username, password, role, is_active
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateUserParams struct {
	ID       string
	Username sql.NullString
	Password sql.NullString
	Role     sql.NullString
	IsActive sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.IsActive,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, role, is_active
FROM users
WHERE id = $1
`

type GetUserRow struct {
	ID       string
	Username sql.NullString
	Role     sql.NullString
	IsActive sql.NullString
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const getUsernamePassword = `-- name: GetUsernamePassword :one
SELECT id, username, password, role, is_active
FROM users
WHERE username = $1
`

type GetUsernamePasswordRow struct {
	ID       string
	Username sql.NullString
	Password sql.NullString
	Role     sql.NullString
	IsActive sql.NullString
}

func (q *Queries) GetUsernamePassword(ctx context.Context, username sql.NullString) (GetUsernamePasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUsernamePassword, username)
	var i GetUsernamePasswordRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.IsActive,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, role, is_active
FROM users
`

type ListUserRow struct {
	ID       string
	Username sql.NullString
	Role     sql.NullString
	IsActive sql.NullString
}

func (q *Queries) ListUser(ctx context.Context) ([]ListUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserRow
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Role,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2, password = $3, role = $4, is_active = $5
WHERE id = $1
`

type UpdateUserParams struct {
	ID       string
	Username sql.NullString
	Password sql.NullString
	Role     sql.NullString
	IsActive sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.IsActive,
	)
	return err
}
